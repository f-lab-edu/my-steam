plugins {
  id 'org.springframework.boot' version '2.7.0'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.asciidoctor.convert' version '1.5.8'
  id 'java'
  id 'jacoco'
}

group = 'com.hojoon'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}
jacoco {
  toolVersion = '0.8.7'
}
jacocoTestReport {
  reports {
    html.required = true
    xml.required = true
    csv.required = false
  }
}

test {
  useJUnitPlatform()
  jacoco {
    destinationFile = file("$buildDir/jacoco/jacoco.exec")
  }
}

task testCoverage(type: Test) {
  group 'verification'
  description 'Runs the unit tests with coverage'

  dependsOn(':test',
      ':jacocoTestReport',
      ':jacocoTestCoverageVerification')

  tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
  tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = "CLASS"
      enabled = true
      limit {
        counter = "LINE"
        value = "COVEREDRATIO"
        minimum = 0.30
      }
      limit {
        counter = "METHOD"
        value = "COVEREDRATIO"
        minimum = 0.30
      }
    }
  }
}

repositories {
  mavenCentral()
}

ext {
  set('snippetsDir', file("build/generated-snippets"))
}

jar {
  enabled = false
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  compileOnly 'org.projectlombok:lombok'
  runtimeOnly 'mysql:mysql-connector-java'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
  testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
  outputs.dir snippetsDir
  useJUnitPlatform()
}

tasks.named('asciidoctor') {
  inputs.dir snippetsDir
  dependsOn test
}
